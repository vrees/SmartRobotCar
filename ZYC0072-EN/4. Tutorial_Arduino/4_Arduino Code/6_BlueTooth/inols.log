






Started logging.

<<<
Content-Length: 3320

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":4864,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"e:\\5-教程\\1.tutorial\\ZYC0072机械手小车\\ZYC0072\\4. Tutorial_Arduino\\4_Arduino Code\\6_BlueTooth","rootUri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth","name":"6_BlueTooth"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.1"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 36899

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino","languageId":"cpp","version":1,"text":"#include <MsTimer2.h>\r\n#include    <Servo.h>\r\n\r\n// PWM control pin\r\n#define PWM1_PIN            5\r\n#define PWM2_PIN            6\r\n// 74HCT595N chip pin\r\n#define SHCP_PIN            2                               // The displacement of the clock\r\n#define EN_PIN              7                               // Can make control\r\n#define DATA_PIN            8                               // Serial data\r\n#define STCP_PIN            4                               // Memory register clock                  \r\n// Ultrasonic control pin\r\nconst int Trig       =      12;\r\nconst int Echo       =      13;\r\n// Trace the control pin\r\n#define LEFT_LINE_TRACJING      A0\r\n#define CENTER_LINE_TRACJING    A1\r\n#define right_LINE_TRACJING     A2\r\n// Servo control pin\r\n#define CLAW_PIN            9\r\n#define ARM_PIN             10\r\n#define BASE_PIN            11\r\n\r\nconst int Forward       = 92;                               // Forward\r\nconst int Backward      = 163;                              // Backward\r\nconst int Turn_Left     = 149;                              // Left translation\r\nconst int Turn_Right    = 106;                              // Right translation\r\nconst int Top_Left      = 20;                               // Upper left mobile\r\nconst int Bottom_Left   = 129;                              // Lower left mobile\r\nconst int Top_Right     = 72;                               // Upper right mobile\r\nconst int Bottom_Right  = 34;                               // The lower right move\r\nconst int Stop          = 0;                                // Stop\r\nconst int Contrarotate  = 172;                              // Counterclockwise rotation\r\nconst int Clockwise     = 83;                               // Rotate clockwise\r\n\r\n\r\nbyte TX_package[5] = {0xA5, 0, 0, 0, 0x5A};                 // Packet header(0xA5) +  original data (n*byte) + inspection sum(1byte) + Package the tail(0x5A)\r\nbyte RX_package[10] = {0};\r\nint UT_distance = 0;\r\nint Serialcount = 0;\r\nint base_degrees = 90;\r\nint arm_degrees = 90;\r\nint claw_degrees = 90;\r\nboolean menory_action_flag;\r\nboolean Line_tracking_Function_flag = false;\r\nboolean Avoidance_Function_flag = false;\r\nboolean Following_Function_flag = false;\r\nboolean Jail_Function_flag = false;\r\nint Left_Tra_Value;\r\nint Center_Tra_Value;\r\nint Right_Tra_Value;\r\nint Black_Line = 500;\r\nint actions_count = 0;\r\nint auto_count;\r\nint claw_read_degress[20] = {0, 0, 0};\r\nint arm_read_degress[20] = {0, 0, 0};\r\nint base_read_degress[20] = {0, 0, 0};\r\n\r\ntypedef struct \r\n{\r\n    byte mode1;             // Bit0: free mode;Bit1: tracking mode;Bit2: Obstacle avoidance mode;Bit3: Follow mode;\r\n                            // Bit4: Dungeon Mode;Bit5: Save button;Bit6: Automatic button;Bit7: empty\r\n    byte mode2;             // Bit0: fluke;Bit1: closed claw;Bit2: clockwise rotation;Bit3: reverse;\r\n    char x_axis = 0;        // Store variables on the X axis\r\n    char y_axis = 0;        // Store the variables on the Y axis\r\n    byte C_speed = 127;     // Speed of storage cart\r\n    char x_Base = 0;        // Store the steering gear on the X axis\r\n    char y_Arm = 0;         // Store the steering gear on the Y-axis\r\n}rx_buffer;\r\n\r\nrx_buffer RX_buffer;\r\n\r\nServo clawservo;\r\nServo armservo;\r\nServo baseservo;\r\n\r\nvoid Timer2Isr()\r\n{\r\n    sei();\r\n    UT_distance = SR04(Trig, Echo);\r\n}\r\nvoid setup()\r\n{\r\n    pinMode(SHCP_PIN, OUTPUT);\r\n    pinMode(EN_PIN, OUTPUT);\r\n    pinMode(DATA_PIN, OUTPUT);\r\n    pinMode(STCP_PIN, OUTPUT);\r\n    pinMode(PWM1_PIN, OUTPUT);\r\n    pinMode(PWM2_PIN, OUTPUT);\r\n\r\n    pinMode(Trig, OUTPUT);\r\n    pinMode(Echo, INPUT);\r\n\r\n    pinMode(LEFT_LINE_TRACJING, INPUT);\r\n    pinMode(CENTER_LINE_TRACJING, INPUT);\r\n    pinMode(right_LINE_TRACJING, INPUT);\r\n\r\n    clawservo.attach(CLAW_PIN);\r\n    armservo.attach(ARM_PIN);\r\n    baseservo.attach(BASE_PIN);\r\n    clawservo.write(claw_degrees);\r\n    delay(500);\r\n    armservo.write(arm_degrees);\r\n    delay(500);\r\n    baseservo.write(base_degrees);\r\n    delay(500);\r\n\r\n    Motor(Stop, 0);\r\n\r\n    Serial.begin(9600);\r\n\r\n    //5ms timed interrupt Settings use timer2    \r\n    MsTimer2::set(100, Timer2Isr);\r\n    MsTimer2::start();\r\n}\r\n\r\nvoid loop()\r\n{\r\n    TX_Information(UT_distance, auto_count);                    // Send ultrasonic data\r\n    RX_Information();                                           // Receiving Bluetooth data\r\n    switch (RX_buffer.mode1)\r\n    {\r\n        case 0x02:       //tracking mode\r\n            Motor(Stop, 0);\r\n            Line_tracking_Function();\r\n            delay(10);\r\n            break;\r\n        case 0x04:       //Obstacle avoidance mode\r\n            Motor(Stop, 0);\r\n            Avoidance_Function();\r\n            delay(10);\r\n            break;\r\n        case 0x08:       //Follow the pattern\r\n            Motor(Stop, 0);\r\n            Following_Function();\r\n            delay(10);\r\n            break;\r\n        case 0x10:       //Dungeon mode\r\n            Motor(Stop, 0);\r\n            Jail_Function();\r\n            delay(10);\r\n            break;\r\n        case 0x40:       //Automatic mode\r\n            Motor(Stop, 0);\r\n            auto_doit();\r\n            delay(10);\r\n            break;\r\n        default:\r\n            free_mode();\r\n            break;\r\n    }\r\n}\r\n\r\nvoid Line_tracking_Function()       // tracking mode\r\n{\r\n    Line_tracking_Function_flag = true;\r\n    while (Line_tracking_Function_flag)\r\n    {\r\n        Left_Tra_Value = analogRead(LEFT_LINE_TRACJING);\r\n        Center_Tra_Value = analogRead(CENTER_LINE_TRACJING);\r\n        Right_Tra_Value = analogRead(right_LINE_TRACJING);\r\n        if (Left_Tra_Value < Black_Line && Center_Tra_Value >= Black_Line && Right_Tra_Value < Black_Line)\r\n        {\r\n            Motor(Forward, 175);\r\n        }\r\n        else if (Left_Tra_Value >= Black_Line && Center_Tra_Value >= Black_Line && Right_Tra_Value < Black_Line)\r\n        {\r\n            Motor(Contrarotate, 165);\r\n        }\r\n        else if (Left_Tra_Value >= Black_Line && Center_Tra_Value < Black_Line && Right_Tra_Value < Black_Line)\r\n        {\r\n            Motor(Contrarotate, 190);\r\n        }\r\n        else if (Left_Tra_Value < Black_Line && Center_Tra_Value < Black_Line && Right_Tra_Value >= Black_Line)\r\n        {\r\n            Motor(Clockwise, 190);\r\n        }\r\n        else if (Left_Tra_Value < Black_Line && Center_Tra_Value >= Black_Line && Right_Tra_Value >= Black_Line)\r\n        {\r\n            Motor(Clockwise, 165);\r\n        }\r\n        else if (Left_Tra_Value >= Black_Line && Center_Tra_Value >= Black_Line && Right_Tra_Value >= Black_Line)\r\n        {\r\n            Motor(Stop, 0);\r\n        }\r\n        RX_Information();\r\n        if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n        {\r\n            Line_tracking_Function_flag = false;\r\n        }\r\n    }\r\n}\r\n\r\nvoid Avoidance_Function()           // Obstacle avoidance mode\r\n{\r\n    int i;\r\n    Avoidance_Function_flag = true;\r\n    while (Avoidance_Function_flag)\r\n    {\r\n        if (UT_distance <= 25)\r\n        {\r\n            if (UT_distance <= 15)\r\n            {\r\n                Motor(Stop, 0);\r\n                /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n                for(i = 0; i < 2; i++)\r\n                {\r\n                    delay(50);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        Avoidance_Function_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n                Motor(Backward, 180);\r\n                /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n                for(i = 0; i < 12; i++)\r\n                {\r\n                    delay(50);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        Avoidance_Function_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n                Motor(Clockwise, 180);\r\n                /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n                for(i = 0; i < 4; i++)\r\n                {\r\n                    delay(50);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        Avoidance_Function_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                Motor(Stop, 0);\r\n                /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n                for(i = 0; i < 2; i++)\r\n                {\r\n                    delay(50);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        Avoidance_Function_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n                Motor(Backward, 180);\r\n                /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n                for(i = 0; i < 6; i++)\r\n                {\r\n                    delay(50);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        Avoidance_Function_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n                Motor(Contrarotate, 180);\r\n                /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n                for(i = 0; i < 12; i++)\r\n                {\r\n                    delay(50);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        Avoidance_Function_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            Motor(Forward, 180);\r\n        }\r\n        RX_Information();\r\n        if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n        {\r\n            Avoidance_Function_flag = false;\r\n        }\r\n    }\r\n}\r\n\r\nvoid Following_Function()           // Follow the pattern\r\n{\r\n    Following_Function_flag = true;\r\n    while (Following_Function_flag)\r\n    {\r\n        if (UT_distance < 15)\r\n        {\r\n            Motor(Backward, 200);\r\n        }\r\n        else if (15 <= UT_distance && UT_distance <= 20)\r\n        {\r\n            Motor(Stop, 0);\r\n        }\r\n        else if (20 <= UT_distance && UT_distance <= 25)\r\n        {\r\n            Motor(Forward, 180);\r\n        }\r\n        else if (25 <= UT_distance && UT_distance <= 50)\r\n        {\r\n            Motor(Forward, 220);\r\n        }\r\n        else\r\n        {\r\n            Motor(Stop, 0);\r\n        }\r\n        RX_Information();\r\n        if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x10)\r\n        {\r\n            Following_Function_flag = false;\r\n        }\r\n    }\r\n}\r\n\r\nvoid Jail_Function()                // Dungeon mode\r\n{\r\n    int i;\r\n    Jail_Function_flag = true;\r\n    while (Jail_Function_flag)\r\n    {\r\n        Left_Tra_Value = analogRead(LEFT_LINE_TRACJING);\r\n        Center_Tra_Value = analogRead(CENTER_LINE_TRACJING);\r\n        Right_Tra_Value = analogRead(right_LINE_TRACJING);\r\n        if (Left_Tra_Value < Black_Line && Center_Tra_Value < Black_Line && Right_Tra_Value < Black_Line)\r\n        {\r\n            Motor(Forward, 150);\r\n        }\r\n        else if (Left_Tra_Value >= Black_Line && Center_Tra_Value < Black_Line && Right_Tra_Value < Black_Line)\r\n        {\r\n            Motor(Backward,150);\r\n            /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n            for(i = 0; i < 4; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n            Motor(Clockwise,160);\r\n            /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n            for(i = 0; i < 10; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        else if (Left_Tra_Value >= Black_Line && Center_Tra_Value >= Black_Line && Right_Tra_Value < Black_Line)\r\n        {\r\n            Motor(Backward,150);\r\n             /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n            for(i = 0; i < 4; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n            Motor(Clockwise,160);\r\n            for(i = 0; i < 12; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        else if (Left_Tra_Value < Black_Line && Center_Tra_Value < Black_Line && Right_Tra_Value >= Black_Line)\r\n        {\r\n            Motor(Backward,150);\r\n            for(i = 0; i < 4; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n            Motor(Contrarotate,160);\r\n            for(i = 0; i < 10; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        else if (Left_Tra_Value < Black_Line && Center_Tra_Value >= Black_Line && Right_Tra_Value >= Black_Line)\r\n        {\r\n            Motor(Backward,150);\r\n             /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n            for(i = 0; i < 4; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n            Motor(Contrarotate,160);\r\n            for(i = 0; i < 12; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            Motor(Backward,150);\r\n            for(i = 0; i < 12; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n            Motor(Clockwise,160);\r\n            for(i = 0; i < 10; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        RX_Information();\r\n        if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n        {\r\n            Jail_Function_flag = false;\r\n        }\r\n    }\r\n}\r\n\r\nvoid auto_doit()                      // Automatic mode\r\n{\r\n    if (0 != auto_count)\r\n    {\r\n        menory_action_flag = true;\r\n    }\r\n    actions_count = 0;\r\n    claw_degrees = clawservo.read();\r\n    arm_degrees = armservo.read();\r\n    base_degrees = baseservo.read();\r\n    while (menory_action_flag)\r\n    {\r\n        for (int i = (1); i <= (auto_count); i = i + (1))\r\n        {\r\n            RX_Information();\r\n            if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n            {\r\n                menory_action_flag = false;\r\n                return;\r\n            }\r\n            if (claw_degrees < claw_read_degress[(int)(i - 1)])\r\n            {\r\n                while (claw_degrees < claw_read_degress[(int)(i - 1)])\r\n                {\r\n                    claw_degrees = claw_degrees + 1;\r\n                    clawservo.write(claw_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                while (claw_degrees > claw_read_degress[(int)(i - 1)])\r\n                {\r\n                    claw_degrees = claw_degrees - 1;\r\n                    clawservo.write(claw_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            RX_Information();\r\n            if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n            {\r\n                menory_action_flag = false;\r\n                return;\r\n            }\r\n            if (arm_degrees < arm_read_degress[(int)(i - 1)])\r\n            {\r\n                while (arm_degrees < arm_read_degress[(int)(i - 1)])\r\n                {\r\n                    arm_degrees = arm_degrees + 1;\r\n                    armservo.write(arm_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                while (arm_degrees > arm_read_degress[(int)(i - 1)])\r\n                {\r\n                    arm_degrees = arm_degrees - 1;\r\n                    armservo.write(arm_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            RX_Information();\r\n            if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n            {\r\n                menory_action_flag = false;\r\n                return;\r\n            }\r\n            if (base_degrees < base_read_degress[(int)(i - 1)])\r\n            {\r\n                while (base_degrees < base_read_degress[(int)(i - 1)])\r\n                {\r\n                    base_degrees = base_degrees + 1;\r\n                    baseservo.write(base_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                while (base_degrees > base_read_degress[(int)(i - 1)])\r\n                {\r\n                    base_degrees = base_degrees - 1;\r\n                    baseservo.write(base_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            RX_Information();\r\n            if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n            {\r\n                menory_action_flag = false;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvoid free_mode()                    // free mode\r\n{\r\n    if(RX_buffer.x_axis >= -30 && RX_buffer.x_axis <= 30 && RX_buffer.y_axis >= 30)     //Forward\r\n    {\r\n        Motor(Forward, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.x_axis >= -30 && RX_buffer.x_axis <= 30 && RX_buffer.y_axis <= -30)     //Backward\r\n    {\r\n        Motor(Backward, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.y_axis >= -30 && RX_buffer.y_axis <= 30 && RX_buffer.x_axis <= -30)     //Turn_Left\r\n    {\r\n        Motor(Turn_Left, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.y_axis >= -30 && RX_buffer.y_axis <= 30 && RX_buffer.x_axis >= 30)     //Turn_Right\r\n    {\r\n        Motor(Turn_Right, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.x_axis <= -30 && RX_buffer.y_axis >= 30)     //Top_Left\r\n    {\r\n        Motor(Top_Left, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.x_axis <= -30 && RX_buffer.y_axis <= -30)     //Bottom_Left\r\n    {\r\n        Motor(Bottom_Left, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.x_axis >= 30 && RX_buffer.y_axis >= 30)     //Top_Right\r\n    {\r\n        Motor(Top_Right, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.x_axis >= 30 && RX_buffer.y_axis <= -30)     //Bottom_Right\r\n    {\r\n        Motor(Bottom_Right, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.mode2 & 0x04)     //Contrarotate\r\n    {\r\n        Motor(Contrarotate, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.mode2 & 0x08)     //Clockwise\r\n    {\r\n        Motor(Clockwise, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.y_Arm <= 30 && RX_buffer.y_Arm >= -30 && RX_buffer.x_Base <= -30)    // base_left\r\n    {\r\n        base_degrees = base_degrees + 1;\r\n        if (base_degrees >= 185) \r\n        {\r\n            base_degrees = 185;\r\n        }\r\n        baseservo.write(base_degrees);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.y_Arm <= 30 && RX_buffer.y_Arm >= -30 && RX_buffer.x_Base >= 30)     // base_right\r\n    {\r\n        base_degrees = base_degrees - 1;\r\n        if (base_degrees <= 0) \r\n        {\r\n            base_degrees = 0;\r\n        }\r\n        baseservo.write(base_degrees);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.x_Base <= 30 && RX_buffer.x_Base >= -30 && RX_buffer.y_Arm <= -30)    // Arm contraction\r\n    {\r\n        arm_degrees = arm_degrees - 1;\r\n        if (arm_degrees <= 0) \r\n        {\r\n            arm_degrees = 0;\r\n        }\r\n        armservo.write(arm_degrees);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.x_Base <= 30 && RX_buffer.x_Base >= -30 && RX_buffer.y_Arm >= 30)     // Arm elongation\r\n    {\r\n        arm_degrees = arm_degrees + 1;\r\n        if (arm_degrees >= 150) \r\n        {\r\n            arm_degrees = 150;\r\n        }\r\n        armservo.write(arm_degrees);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.mode2 & 0x01)            // claws open                                        \r\n    {\r\n        claw_degrees = claw_degrees - 1;\r\n        if (claw_degrees <= 50) \r\n        {\r\n            claw_degrees = 50;\r\n        }\r\n        clawservo.write(claw_degrees);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.mode2 & 0x02)            // claws closed\r\n    {\r\n        claw_degrees = claw_degrees + 1;\r\n        if (claw_degrees >= 150) \r\n        {\r\n            claw_degrees = 150;\r\n        }\r\n        clawservo.write(claw_degrees);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.mode1 & 0x20)            // save\r\n    {\r\n        read_degress();\r\n    }  \r\n    else\r\n    {\r\n        Motor(Stop, 0);\r\n    }\r\n}\r\n\r\nvoid read_degress()\r\n{\r\n    if (actions_count <= 19)\r\n    {\r\n        claw_read_degress[(int)((actions_count + 1) - 1)] = clawservo.read();\r\n        delay(50);\r\n        RX_Information(); \r\n        arm_read_degress[(int)((actions_count + 1) - 1)] = armservo.read();\r\n        delay(50);\r\n        RX_Information(); \r\n        base_read_degress[(int)((actions_count + 1) - 1)] = baseservo.read();\r\n        delay(50);\r\n        RX_Information(); \r\n        actions_count = actions_count + 1;\r\n        auto_count = actions_count;\r\n    }\r\n}\r\n\r\nvoid auto_do()\r\n{\r\n    if (0 != auto_count)\r\n    {\r\n        menory_action_flag = true;\r\n    }\r\n    actions_count = 0;\r\n    claw_degrees = clawservo.read();\r\n    arm_degrees = armservo.read();\r\n    base_degrees = baseservo.read();\r\n    while (menory_action_flag)\r\n    {\r\n        for (int i = (1); i <= (auto_count); i = i + (1))\r\n        {\r\n            RX_Information();\r\n            if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n            {\r\n                menory_action_flag = false;\r\n                return;\r\n            }\r\n            if (claw_degrees < claw_read_degress[(int)(i - 1)])\r\n            {\r\n                while (claw_degrees < claw_read_degress[(int)(i - 1)])\r\n                {\r\n                    claw_degrees = claw_degrees + 1;\r\n                    clawservo.write(claw_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                while (claw_degrees > claw_read_degress[(int)(i - 1)])\r\n                {\r\n                    claw_degrees = claw_degrees - 1;\r\n                    clawservo.write(claw_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            RX_Information();\r\n            if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n            {\r\n                menory_action_flag = false;\r\n                return;\r\n            }\r\n            if (arm_degrees < arm_read_degress[(int)(i - 1)])\r\n            {\r\n                while (arm_degrees < arm_read_degress[(int)(i - 1)])\r\n                {\r\n                    arm_degrees = arm_degrees + 1;\r\n                    armservo.write(arm_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                while (arm_degrees > arm_read_degress[(int)(i - 1)])\r\n                {\r\n                    arm_degrees = arm_degrees - 1;\r\n                    armservo.write(arm_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            RX_Information();\r\n            if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n            {\r\n                menory_action_flag = false;\r\n                return;\r\n            }\r\n            if (base_degrees < base_read_degress[(int)(i - 1)])\r\n            {\r\n                while (base_degrees < base_read_degress[(int)(i - 1)])\r\n                {\r\n                    base_degrees = base_degrees + 1;\r\n                    baseservo.write(base_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                while (base_degrees > base_read_degress[(int)(i - 1)])\r\n                {\r\n                    base_degrees = base_degrees - 1;\r\n                    baseservo.write(base_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            RX_Information();\r\n            if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n            {\r\n                menory_action_flag = false;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvoid Motor(int Dir, int Speed)      // Motor drive\r\n{\r\n    digitalWrite(EN_PIN, LOW);\r\n    analogWrite(PWM1_PIN, Speed);\r\n    analogWrite(PWM2_PIN, Speed);\r\n\r\n    digitalWrite(STCP_PIN, LOW);\r\n    shiftOut(DATA_PIN, SHCP_PIN, MSBFIRST, Dir);\r\n    digitalWrite(STCP_PIN, HIGH);\r\n}\r\n\r\nfloat SR04(int Trig, int Echo)      // Ultrasonic distance measurement\r\n{\r\n    digitalWrite(Trig, LOW);\r\n    delayMicroseconds(2);\r\n    digitalWrite(Trig, HIGH);\r\n    delayMicroseconds(10);\r\n    digitalWrite(Trig, LOW);\r\n    float distance = pulseIn(Echo, HIGH) / 58.00;\r\n    delay(10);\r\n    return distance;\r\n}\r\n\r\nvoid TX_Information(byte dis, byte act)     // Sending data packets\r\n{\r\n    int check;\r\n    if(dis>127) dis = 127;\r\n    if(act>127) act = 127;\r\n    TX_package[1] = dis;\r\n    TX_package[2] = act;\r\n    TX_package[3] = byte(dis + act);                        // The sum of inspection                              \r\n    Serial.write(TX_package, 5);                            // Sending data packets\r\n}\r\n\r\nvoid RX_Information(void)                   // Receiving data packet\r\n{\r\n    if(Serial.available() > 0)\r\n    {\r\n        delay(1);                                           // delay 1MS\r\n        if(Serial.readBytes(RX_package, 10))\r\n        {\r\n            if (RX_package[0] == 0xA5 && RX_package[9] == 0x5A)     // The header and tail of the packet are verified\r\n            {\r\n                Serialcount = 0;\r\n                RX_buffer.mode1 = RX_package[1];\r\n                RX_buffer.mode2 = RX_package[2];\r\n                RX_buffer.x_axis = RX_package[3];\r\n                RX_buffer.y_axis = RX_package[4];\r\n                RX_buffer.C_speed = RX_package[5] + 127;\r\n                RX_buffer.x_Base = RX_package[6];\r\n                RX_buffer.y_Arm = RX_package[7];\r\n            }\r\n            else\r\n            {\r\n                Serialcount++;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        delay(1);\r\n        Serialcount++;\r\n        if(Serialcount > 500)\r\n        {\r\n            Serialcount = 0;\r\n            RX_buffer.mode1 = 0; \r\n            RX_buffer.mode2 = 0;\r\n            RX_buffer.x_axis = 0;\r\n            RX_buffer.y_axis = 0;\r\n            RX_buffer.x_Base = 0;\r\n            RX_buffer.y_Arm = 0;\r\n            Line_tracking_Function_flag = false;\r\n            Avoidance_Function_flag = false;\r\n            Following_Function_flag = false;\r\n            Jail_Function_flag = false;\r\n        }\r\n    }\r\n}"}}}Content-Length: 371

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}Content-Length: 272

{"jsonrpc":"2.0","id":2,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"}}}
>>>
Content-Length: 113

{"jsonrpc":"2.0","id":"1","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 36

{"jsonrpc":"2.0","id":1,"result":[]}Content-Length: 13411

{"jsonrpc":"2.0","id":2,"result":[{"name":"Trig","detail":"const int","kind":13,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":30}},"selectionRange":{"start":{"line":12,"character":10},"end":{"line":12,"character":14}}},{"name":"Echo","detail":"const int","kind":13,"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":30}},"selectionRange":{"start":{"line":13,"character":10},"end":{"line":13,"character":14}}},{"name":"Forward","detail":"const int","kind":13,"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":28}},"selectionRange":{"start":{"line":23,"character":10},"end":{"line":23,"character":17}}},{"name":"Backward","detail":"const int","kind":13,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":29}},"selectionRange":{"start":{"line":24,"character":10},"end":{"line":24,"character":18}}},{"name":"Turn_Left","detail":"const int","kind":13,"range":{"start":{"line":25,"character":0},"end":{"line":25,"character":29}},"selectionRange":{"start":{"line":25,"character":10},"end":{"line":25,"character":19}}},{"name":"Turn_Right","detail":"const int","kind":13,"range":{"start":{"line":26,"character":0},"end":{"line":26,"character":29}},"selectionRange":{"start":{"line":26,"character":10},"end":{"line":26,"character":20}}},{"name":"Top_Left","detail":"const int","kind":13,"range":{"start":{"line":27,"character":0},"end":{"line":27,"character":28}},"selectionRange":{"start":{"line":27,"character":10},"end":{"line":27,"character":18}}},{"name":"Bottom_Left","detail":"const int","kind":13,"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":29}},"selectionRange":{"start":{"line":28,"character":10},"end":{"line":28,"character":21}}},{"name":"Top_Right","detail":"const int","kind":13,"range":{"start":{"line":29,"character":0},"end":{"line":29,"character":28}},"selectionRange":{"start":{"line":29,"character":10},"end":{"line":29,"character":19}}},{"name":"Bottom_Right","detail":"const int","kind":13,"range":{"start":{"line":30,"character":0},"end":{"line":30,"character":28}},"selectionRange":{"start":{"line":30,"character":10},"end":{"line":30,"character":22}}},{"name":"Stop","detail":"const int","kind":13,"range":{"start":{"line":31,"character":0},"end":{"line":31,"character":27}},"selectionRange":{"start":{"line":31,"character":10},"end":{"line":31,"character":14}}},{"name":"Contrarotate","detail":"const int","kind":13,"range":{"start":{"line":32,"character":0},"end":{"line":32,"character":29}},"selectionRange":{"start":{"line":32,"character":10},"end":{"line":32,"character":22}}},{"name":"Clockwise","detail":"const int","kind":13,"range":{"start":{"line":33,"character":0},"end":{"line":33,"character":28}},"selectionRange":{"start":{"line":33,"character":10},"end":{"line":33,"character":19}}},{"name":"TX_package","detail":"byte[5]","kind":13,"range":{"start":{"line":36,"character":0},"end":{"line":36,"character":42}},"selectionRange":{"start":{"line":36,"character":5},"end":{"line":36,"character":15}}},{"name":"RX_package","detail":"byte[10]","kind":13,"range":{"start":{"line":37,"character":0},"end":{"line":37,"character":25}},"selectionRange":{"start":{"line":37,"character":5},"end":{"line":37,"character":15}}},{"name":"UT_distance","detail":"int","kind":13,"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":19}},"selectionRange":{"start":{"line":38,"character":4},"end":{"line":38,"character":15}}},{"name":"Serialcount","detail":"int","kind":13,"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":19}},"selectionRange":{"start":{"line":39,"character":4},"end":{"line":39,"character":15}}},{"name":"base_degrees","detail":"int","kind":13,"range":{"start":{"line":40,"character":0},"end":{"line":40,"character":21}},"selectionRange":{"start":{"line":40,"character":4},"end":{"line":40,"character":16}}},{"name":"arm_degrees","detail":"int","kind":13,"range":{"start":{"line":41,"character":0},"end":{"line":41,"character":20}},"selectionRange":{"start":{"line":41,"character":4},"end":{"line":41,"character":15}}},{"name":"claw_degrees","detail":"int","kind":13,"range":{"start":{"line":42,"character":0},"end":{"line":42,"character":21}},"selectionRange":{"start":{"line":42,"character":4},"end":{"line":42,"character":16}}},{"name":"menory_action_flag","detail":"boolean","kind":13,"range":{"start":{"line":43,"character":0},"end":{"line":43,"character":26}},"selectionRange":{"start":{"line":43,"character":8},"end":{"line":43,"character":26}}},{"name":"Line_tracking_Function_flag","detail":"boolean","kind":13,"range":{"start":{"line":44,"character":0},"end":{"line":44,"character":43}},"selectionRange":{"start":{"line":44,"character":8},"end":{"line":44,"character":35}}},{"name":"Avoidance_Function_flag","detail":"boolean","kind":13,"range":{"start":{"line":45,"character":0},"end":{"line":45,"character":39}},"selectionRange":{"start":{"line":45,"character":8},"end":{"line":45,"character":31}}},{"name":"Following_Function_flag","detail":"boolean","kind":13,"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":39}},"selectionRange":{"start":{"line":46,"character":8},"end":{"line":46,"character":31}}},{"name":"Jail_Function_flag","detail":"boolean","kind":13,"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":34}},"selectionRange":{"start":{"line":47,"character":8},"end":{"line":47,"character":26}}},{"name":"Left_Tra_Value","detail":"int","kind":13,"range":{"start":{"line":48,"character":0},"end":{"line":48,"character":18}},"selectionRange":{"start":{"line":48,"character":4},"end":{"line":48,"character":18}}},{"name":"Center_Tra_Value","detail":"int","kind":13,"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":20}},"selectionRange":{"start":{"line":49,"character":4},"end":{"line":49,"character":20}}},{"name":"Right_Tra_Value","detail":"int","kind":13,"range":{"start":{"line":50,"character":0},"end":{"line":50,"character":19}},"selectionRange":{"start":{"line":50,"character":4},"end":{"line":50,"character":19}}},{"name":"Black_Line","detail":"int","kind":13,"range":{"start":{"line":51,"character":0},"end":{"line":51,"character":20}},"selectionRange":{"start":{"line":51,"character":4},"end":{"line":51,"character":14}}},{"name":"actions_count","detail":"int","kind":13,"range":{"start":{"line":52,"character":0},"end":{"line":52,"character":21}},"selectionRange":{"start":{"line":52,"character":4},"end":{"line":52,"character":17}}},{"name":"auto_count","detail":"int","kind":13,"range":{"start":{"line":53,"character":0},"end":{"line":53,"character":14}},"selectionRange":{"start":{"line":53,"character":4},"end":{"line":53,"character":14}}},{"name":"claw_read_degress","detail":"int[20]","kind":13,"range":{"start":{"line":54,"character":0},"end":{"line":54,"character":37}},"selectionRange":{"start":{"line":54,"character":4},"end":{"line":54,"character":21}}},{"name":"arm_read_degress","detail":"int[20]","kind":13,"range":{"start":{"line":55,"character":0},"end":{"line":55,"character":36}},"selectionRange":{"start":{"line":55,"character":4},"end":{"line":55,"character":20}}},{"name":"base_read_degress","detail":"int[20]","kind":13,"range":{"start":{"line":56,"character":0},"end":{"line":56,"character":37}},"selectionRange":{"start":{"line":56,"character":4},"end":{"line":56,"character":21}}},{"name":"(anonymous struct)","detail":"struct","kind":23,"range":{"start":{"line":58,"character":8},"end":{"line":68,"character":1}},"selectionRange":{"start":{"line":58,"character":8},"end":{"line":58,"character":14}},"children":[{"name":"mode1","detail":"byte","kind":8,"range":{"start":{"line":60,"character":4},"end":{"line":60,"character":14}},"selectionRange":{"start":{"line":60,"character":9},"end":{"line":60,"character":14}}},{"name":"mode2","detail":"byte","kind":8,"range":{"start":{"line":62,"character":4},"end":{"line":62,"character":14}},"selectionRange":{"start":{"line":62,"character":9},"end":{"line":62,"character":14}}},{"name":"x_axis","detail":"char","kind":8,"range":{"start":{"line":63,"character":4},"end":{"line":63,"character":19}},"selectionRange":{"start":{"line":63,"character":9},"end":{"line":63,"character":15}}},{"name":"y_axis","detail":"char","kind":8,"range":{"start":{"line":64,"character":4},"end":{"line":64,"character":19}},"selectionRange":{"start":{"line":64,"character":9},"end":{"line":64,"character":15}}},{"name":"C_speed","detail":"byte","kind":8,"range":{"start":{"line":65,"character":4},"end":{"line":65,"character":22}},"selectionRange":{"start":{"line":65,"character":9},"end":{"line":65,"character":16}}},{"name":"x_Base","detail":"char","kind":8,"range":{"start":{"line":66,"character":4},"end":{"line":66,"character":19}},"selectionRange":{"start":{"line":66,"character":9},"end":{"line":66,"character":15}}},{"name":"y_Arm","detail":"char","kind":8,"range":{"start":{"line":67,"character":4},"end":{"line":67,"character":18}},"selectionRange":{"start":{"line":67,"character":9},"end":{"line":67,"character":14}}}]},{"name":"rx_buffer","detail":"type alias","kind":5,"range":{"start":{"line":58,"character":0},"end":{"line":68,"character":10}},"selectionRange":{"start":{"line":68,"character":1},"end":{"line":68,"character":10}}},{"name":"RX_buffer","detail":"rx_buffer","kind":13,"range":{"start":{"line":70,"character":0},"end":{"line":70,"character":19}},"selectionRange":{"start":{"line":70,"character":10},"end":{"line":70,"character":19}}},{"name":"clawservo","detail":"Servo","kind":13,"range":{"start":{"line":72,"character":0},"end":{"line":72,"character":15}},"selectionRange":{"start":{"line":72,"character":6},"end":{"line":72,"character":15}}},{"name":"armservo","detail":"Servo","kind":13,"range":{"start":{"line":73,"character":0},"end":{"line":73,"character":14}},"selectionRange":{"start":{"line":73,"character":6},"end":{"line":73,"character":14}}},{"name":"baseservo","detail":"Servo","kind":13,"range":{"start":{"line":74,"character":0},"end":{"line":74,"character":15}},"selectionRange":{"start":{"line":74,"character":6},"end":{"line":74,"character":15}}},{"name":"Timer2Isr","detail":"void ()","kind":12,"range":{"start":{"line":76,"character":0},"end":{"line":80,"character":1}},"selectionRange":{"start":{"line":76,"character":5},"end":{"line":76,"character":14}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":81,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":81,"character":5},"end":{"line":81,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":116,"character":0},"end":{"line":151,"character":1}},"selectionRange":{"start":{"line":116,"character":5},"end":{"line":116,"character":9}}},{"name":"Line_tracking_Function","detail":"void ()","kind":12,"range":{"start":{"line":153,"character":0},"end":{"line":191,"character":1}},"selectionRange":{"start":{"line":153,"character":5},"end":{"line":153,"character":27}}},{"name":"Avoidance_Function","detail":"void ()","kind":12,"range":{"start":{"line":193,"character":0},"end":{"line":290,"character":1}},"selectionRange":{"start":{"line":193,"character":5},"end":{"line":193,"character":23}}},{"name":"Following_Function","detail":"void ()","kind":12,"range":{"start":{"line":292,"character":0},"end":{"line":323,"character":1}},"selectionRange":{"start":{"line":292,"character":5},"end":{"line":292,"character":23}}},{"name":"Jail_Function","detail":"void ()","kind":12,"range":{"start":{"line":325,"character":0},"end":{"line":473,"character":1}},"selectionRange":{"start":{"line":325,"character":5},"end":{"line":325,"character":18}}},{"name":"auto_doit","detail":"void ()","kind":12,"range":{"start":{"line":475,"character":0},"end":{"line":605,"character":1}},"selectionRange":{"start":{"line":475,"character":5},"end":{"line":475,"character":14}}},{"name":"free_mode","detail":"void ()","kind":12,"range":{"start":{"line":607,"character":0},"end":{"line":727,"character":1}},"selectionRange":{"start":{"line":607,"character":5},"end":{"line":607,"character":14}}},{"name":"read_degress","detail":"void ()","kind":12,"range":{"start":{"line":729,"character":0},"end":{"line":745,"character":1}},"selectionRange":{"start":{"line":729,"character":5},"end":{"line":729,"character":17}}},{"name":"auto_do","detail":"void ()","kind":12,"range":{"start":{"line":747,"character":0},"end":{"line":877,"character":1}},"selectionRange":{"start":{"line":747,"character":5},"end":{"line":747,"character":12}}},{"name":"Motor","detail":"void (int, int)","kind":12,"range":{"start":{"line":879,"character":0},"end":{"line":888,"character":1}},"selectionRange":{"start":{"line":879,"character":5},"end":{"line":879,"character":10}}},{"name":"SR04","detail":"float (int, int)","kind":12,"range":{"start":{"line":890,"character":0},"end":{"line":900,"character":1}},"selectionRange":{"start":{"line":890,"character":6},"end":{"line":890,"character":10}}},{"name":"TX_Information","detail":"void (byte, byte)","kind":12,"range":{"start":{"line":902,"character":0},"end":{"line":911,"character":1}},"selectionRange":{"start":{"line":902,"character":5},"end":{"line":902,"character":19}}},{"name":"RX_Information","detail":"void ()","kind":12,"range":{"start":{"line":913,"character":0},"end":{"line":957,"character":1}},"selectionRange":{"start":{"line":913,"character":5},"end":{"line":913,"character":19}}}]}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"1","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/27","percentage":7}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/27","percentage":11}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/27","percentage":14}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/27","percentage":14}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/27","percentage":18}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/27","percentage":18}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/27","percentage":22}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/27","percentage":22}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/27","percentage":25}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/27","percentage":25}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/27","percentage":29}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/27","percentage":29}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/27","percentage":33}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/27","percentage":33}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/27","percentage":37}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/27","percentage":37}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/27","percentage":40}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/27","percentage":40}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/27","percentage":44}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/27","percentage":44}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/27","percentage":48}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/27","percentage":48}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/27","percentage":51}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/27","percentage":51}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/27","percentage":55}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/27","percentage":55}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/27","percentage":59}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/27","percentage":59}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/27","percentage":62}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/27","percentage":62}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/27","percentage":66}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/27","percentage":66}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/27","percentage":70}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/27","percentage":70}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"20/27","percentage":74}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/27","percentage":77}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/27","percentage":77}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"22/27","percentage":81}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"23/27","percentage":85}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"24/27","percentage":88}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"25/27","percentage":92}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"26/27","percentage":96}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 179

{"jsonrpc":"2.0","method":"ino/didCompleteBuild","params":{"buildOutputUri":"file:///c%3A/Users/Administrator/AppData/Local/Temp/arduino-sketch-A3382DABA7F6E369095E4EA5ED379A56"}}
>>>
Content-Length: 118

{"jsonrpc":"2.0","id":"2","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"2","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 113

{"jsonrpc":"2.0","id":"3","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"3","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 301

{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"position":{"line":24,"character":41}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":3,"result":null}
<<<
Content-Length: 301

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"position":{"line":20,"character":27}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":4,"result":null}
<<<
Content-Length: 301

{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"position":{"line":21,"character":25}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":5,"result":null}
<<<
Content-Length: 313

{"jsonrpc":"2.0","id":6,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"position":{"line":21,"character":30}}}
>>>
Content-Length: 36

{"jsonrpc":"2.0","id":6,"result":[]}
<<<
Content-Length: 375

{"jsonrpc":"2.0","id":7,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"range":{"start":{"line":21,"character":30},"end":{"line":21,"character":30}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"jsonrpc":"2.0","id":7,"result":[]}
<<<
Content-Length: 313

{"jsonrpc":"2.0","id":8,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"position":{"line":20,"character":30}}}
>>>
Content-Length: 36

{"jsonrpc":"2.0","id":8,"result":[]}
<<<
Content-Length: 375

{"jsonrpc":"2.0","id":9,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"range":{"start":{"line":20,"character":30},"end":{"line":20,"character":30}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"jsonrpc":"2.0","id":9,"result":[]}
<<<
Content-Length: 314

{"jsonrpc":"2.0","id":10,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"position":{"line":19,"character":29}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":10,"result":[]}
<<<
Content-Length: 376

{"jsonrpc":"2.0","id":11,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"range":{"start":{"line":19,"character":29},"end":{"line":19,"character":29}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":11,"result":[]}
<<<
Content-Length: 314

{"jsonrpc":"2.0","id":12,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"position":{"line":20,"character":30}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":12,"result":[]}
<<<
Content-Length: 376

{"jsonrpc":"2.0","id":13,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"range":{"start":{"line":20,"character":30},"end":{"line":20,"character":30}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":13,"result":[]}
<<<
Content-Length: 314

{"jsonrpc":"2.0","id":14,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"position":{"line":19,"character":29}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":14,"result":[]}
<<<
Content-Length: 376

{"jsonrpc":"2.0","id":15,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"range":{"start":{"line":19,"character":29},"end":{"line":19,"character":29}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 37

{"jsonrpc":"2.0","id":15,"result":[]}
<<<
Content-Length: 302

{"jsonrpc":"2.0","id":16,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"position":{"line":21,"character":25}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":16,"result":null}
<<<
Content-Length: 302

{"jsonrpc":"2.0","id":17,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"position":{"line":21,"character":29}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":17,"result":null}
<<<
Content-Length: 302

{"jsonrpc":"2.0","id":18,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"position":{"line":23,"character":42}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":18,"result":null}
<<<
Content-Length: 179

{"jsonrpc":"2.0","method":"ino/didCompleteBuild","params":{"buildOutputUri":"file:///c%3A/Users/Administrator/AppData/Local/Temp/arduino-sketch-A3382DABA7F6E369095E4EA5ED379A56"}}
>>>
Content-Length: 118

{"jsonrpc":"2.0","id":"4","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"4","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 113

{"jsonrpc":"2.0","id":"5","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"5","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 302

{"jsonrpc":"2.0","id":19,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"position":{"line":12,"character":14}}}
>>>
Content-Length: 294

{"jsonrpc":"2.0","id":19,"result":{"contents":{"kind":"markdown","value":"### variable `Trig`  \n\n---\nType: `const int`  \nValue = `12 (0xc)`  \nUltrasonic control pin  \n\n---\n```cpp\nconst int Trig = 12\n```"},"range":{"start":{"line":12,"character":10},"end":{"line":12,"character":14}}}}
<<<
Content-Length: 302

{"jsonrpc":"2.0","id":20,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"position":{"line":18,"character":18}}}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":20,"result":null}
<<<
Content-Length: 59

{"jsonrpc":"2.0","id":21,"method":"shutdown","params":null}
>>>
Content-Length: 39

{"jsonrpc":"2.0","id":21,"result":null}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}






Started logging.

<<<
Content-Length: 3320

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":8876,"clientInfo":{"name":"vscode","version":"1.53.2"},"rootPath":"e:\\5-教程\\1.tutorial\\ZYC0072机械手小车\\ZYC0072\\4. Tutorial_Arduino\\4_Arduino Code\\6_BlueTooth","rootUri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth","name":"6_BlueTooth"}]}}
>>>
Content-Length: 936

{"jsonrpc":"2.0","id":0,"result":{"capabilities":{"textDocumentSync":{"openClose":true,"change":2,"save":{"includeText":true}},"completionProvider":{"triggerCharacters":[".","\u003c","\u003e",":","\"","/"],"allCommitCharacters":[" ","\t","(",")","[","]","{","}","\u003c","\u003e",":",";",",","+","-","/","*","%","^","\u0026","#","?",".","=","\"","'","|"],"completionItem":{}},"hoverProvider":{},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":{},"documentHighlightProvider":{},"documentSymbolProvider":{},"codeActionProvider":{"codeActionKinds":["quickfix","refactor","info"]},"documentFormattingProvider":{},"documentRangeFormattingProvider":{},"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":{},"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]},"workspaceSymbolProvider":{}},"serverInfo":{"name":"arduino-language-server","version":"0.7.2"}}}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 36899

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino","languageId":"cpp","version":1,"text":"#include <MsTimer2.h>\r\n#include    <Servo.h>\r\n\r\n// PWM control pin\r\n#define PWM1_PIN            5\r\n#define PWM2_PIN            6\r\n// 74HCT595N chip pin\r\n#define SHCP_PIN            2                               // The displacement of the clock\r\n#define EN_PIN              7                               // Can make control\r\n#define DATA_PIN            8                               // Serial data\r\n#define STCP_PIN            4                               // Memory register clock                  \r\n// Ultrasonic control pin\r\nconst int Trig       =      12;\r\nconst int Echo       =      13;\r\n// Trace the control pin\r\n#define LEFT_LINE_TRACJING      A0\r\n#define CENTER_LINE_TRACJING    A1\r\n#define right_LINE_TRACJING     A2\r\n// Servo control pin\r\n#define CLAW_PIN            9\r\n#define ARM_PIN             10\r\n#define BASE_PIN            11\r\n\r\nconst int Forward       = 92;                               // Forward\r\nconst int Backward      = 163;                              // Backward\r\nconst int Turn_Left     = 149;                              // Left translation\r\nconst int Turn_Right    = 106;                              // Right translation\r\nconst int Top_Left      = 20;                               // Upper left mobile\r\nconst int Bottom_Left   = 129;                              // Lower left mobile\r\nconst int Top_Right     = 72;                               // Upper right mobile\r\nconst int Bottom_Right  = 34;                               // The lower right move\r\nconst int Stop          = 0;                                // Stop\r\nconst int Contrarotate  = 172;                              // Counterclockwise rotation\r\nconst int Clockwise     = 83;                               // Rotate clockwise\r\n\r\n\r\nbyte TX_package[5] = {0xA5, 0, 0, 0, 0x5A};                 // Packet header(0xA5) +  original data (n*byte) + inspection sum(1byte) + Package the tail(0x5A)\r\nbyte RX_package[10] = {0};\r\nint UT_distance = 0;\r\nint Serialcount = 0;\r\nint base_degrees = 90;\r\nint arm_degrees = 90;\r\nint claw_degrees = 90;\r\nboolean menory_action_flag;\r\nboolean Line_tracking_Function_flag = false;\r\nboolean Avoidance_Function_flag = false;\r\nboolean Following_Function_flag = false;\r\nboolean Jail_Function_flag = false;\r\nint Left_Tra_Value;\r\nint Center_Tra_Value;\r\nint Right_Tra_Value;\r\nint Black_Line = 500;\r\nint actions_count = 0;\r\nint auto_count;\r\nint claw_read_degress[20] = {0, 0, 0};\r\nint arm_read_degress[20] = {0, 0, 0};\r\nint base_read_degress[20] = {0, 0, 0};\r\n\r\ntypedef struct \r\n{\r\n    byte mode1;             // Bit0: free mode;Bit1: tracking mode;Bit2: Obstacle avoidance mode;Bit3: Follow mode;\r\n                            // Bit4: Dungeon Mode;Bit5: Save button;Bit6: Automatic button;Bit7: empty\r\n    byte mode2;             // Bit0: fluke;Bit1: closed claw;Bit2: clockwise rotation;Bit3: reverse;\r\n    char x_axis = 0;        // Store variables on the X axis\r\n    char y_axis = 0;        // Store the variables on the Y axis\r\n    byte C_speed = 127;     // Speed of storage cart\r\n    char x_Base = 0;        // Store the steering gear on the X axis\r\n    char y_Arm = 0;         // Store the steering gear on the Y-axis\r\n}rx_buffer;\r\n\r\nrx_buffer RX_buffer;\r\n\r\nServo clawservo;\r\nServo armservo;\r\nServo baseservo;\r\n\r\nvoid Timer2Isr()\r\n{\r\n    sei();\r\n    UT_distance = SR04(Trig, Echo);\r\n}\r\nvoid setup()\r\n{\r\n    pinMode(SHCP_PIN, OUTPUT);\r\n    pinMode(EN_PIN, OUTPUT);\r\n    pinMode(DATA_PIN, OUTPUT);\r\n    pinMode(STCP_PIN, OUTPUT);\r\n    pinMode(PWM1_PIN, OUTPUT);\r\n    pinMode(PWM2_PIN, OUTPUT);\r\n\r\n    pinMode(Trig, OUTPUT);\r\n    pinMode(Echo, INPUT);\r\n\r\n    pinMode(LEFT_LINE_TRACJING, INPUT);\r\n    pinMode(CENTER_LINE_TRACJING, INPUT);\r\n    pinMode(right_LINE_TRACJING, INPUT);\r\n\r\n    clawservo.attach(CLAW_PIN);\r\n    armservo.attach(ARM_PIN);\r\n    baseservo.attach(BASE_PIN);\r\n    clawservo.write(claw_degrees);\r\n    delay(500);\r\n    armservo.write(arm_degrees);\r\n    delay(500);\r\n    baseservo.write(base_degrees);\r\n    delay(500);\r\n\r\n    Motor(Stop, 0);\r\n\r\n    Serial.begin(9600);\r\n\r\n    //5ms timed interrupt Settings use timer2    \r\n    MsTimer2::set(100, Timer2Isr);\r\n    MsTimer2::start();\r\n}\r\n\r\nvoid loop()\r\n{\r\n    TX_Information(UT_distance, auto_count);                    // Send ultrasonic data\r\n    RX_Information();                                           // Receiving Bluetooth data\r\n    switch (RX_buffer.mode1)\r\n    {\r\n        case 0x02:       //tracking mode\r\n            Motor(Stop, 0);\r\n            Line_tracking_Function();\r\n            delay(10);\r\n            break;\r\n        case 0x04:       //Obstacle avoidance mode\r\n            Motor(Stop, 0);\r\n            Avoidance_Function();\r\n            delay(10);\r\n            break;\r\n        case 0x08:       //Follow the pattern\r\n            Motor(Stop, 0);\r\n            Following_Function();\r\n            delay(10);\r\n            break;\r\n        case 0x10:       //Dungeon mode\r\n            Motor(Stop, 0);\r\n            Jail_Function();\r\n            delay(10);\r\n            break;\r\n        case 0x40:       //Automatic mode\r\n            Motor(Stop, 0);\r\n            auto_doit();\r\n            delay(10);\r\n            break;\r\n        default:\r\n            free_mode();\r\n            break;\r\n    }\r\n}\r\n\r\nvoid Line_tracking_Function()       // tracking mode\r\n{\r\n    Line_tracking_Function_flag = true;\r\n    while (Line_tracking_Function_flag)\r\n    {\r\n        Left_Tra_Value = analogRead(LEFT_LINE_TRACJING);\r\n        Center_Tra_Value = analogRead(CENTER_LINE_TRACJING);\r\n        Right_Tra_Value = analogRead(right_LINE_TRACJING);\r\n        if (Left_Tra_Value < Black_Line && Center_Tra_Value >= Black_Line && Right_Tra_Value < Black_Line)\r\n        {\r\n            Motor(Forward, 175);\r\n        }\r\n        else if (Left_Tra_Value >= Black_Line && Center_Tra_Value >= Black_Line && Right_Tra_Value < Black_Line)\r\n        {\r\n            Motor(Contrarotate, 165);\r\n        }\r\n        else if (Left_Tra_Value >= Black_Line && Center_Tra_Value < Black_Line && Right_Tra_Value < Black_Line)\r\n        {\r\n            Motor(Contrarotate, 190);\r\n        }\r\n        else if (Left_Tra_Value < Black_Line && Center_Tra_Value < Black_Line && Right_Tra_Value >= Black_Line)\r\n        {\r\n            Motor(Clockwise, 190);\r\n        }\r\n        else if (Left_Tra_Value < Black_Line && Center_Tra_Value >= Black_Line && Right_Tra_Value >= Black_Line)\r\n        {\r\n            Motor(Clockwise, 165);\r\n        }\r\n        else if (Left_Tra_Value >= Black_Line && Center_Tra_Value >= Black_Line && Right_Tra_Value >= Black_Line)\r\n        {\r\n            Motor(Stop, 0);\r\n        }\r\n        RX_Information();\r\n        if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n        {\r\n            Line_tracking_Function_flag = false;\r\n        }\r\n    }\r\n}\r\n\r\nvoid Avoidance_Function()           // Obstacle avoidance mode\r\n{\r\n    int i;\r\n    Avoidance_Function_flag = true;\r\n    while (Avoidance_Function_flag)\r\n    {\r\n        if (UT_distance <= 25)\r\n        {\r\n            if (UT_distance <= 15)\r\n            {\r\n                Motor(Stop, 0);\r\n                /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n                for(i = 0; i < 2; i++)\r\n                {\r\n                    delay(50);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        Avoidance_Function_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n                Motor(Backward, 180);\r\n                /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n                for(i = 0; i < 12; i++)\r\n                {\r\n                    delay(50);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        Avoidance_Function_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n                Motor(Clockwise, 180);\r\n                /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n                for(i = 0; i < 4; i++)\r\n                {\r\n                    delay(50);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        Avoidance_Function_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                Motor(Stop, 0);\r\n                /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n                for(i = 0; i < 2; i++)\r\n                {\r\n                    delay(50);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        Avoidance_Function_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n                Motor(Backward, 180);\r\n                /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n                for(i = 0; i < 6; i++)\r\n                {\r\n                    delay(50);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        Avoidance_Function_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n                Motor(Contrarotate, 180);\r\n                /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n                for(i = 0; i < 12; i++)\r\n                {\r\n                    delay(50);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        Avoidance_Function_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            Motor(Forward, 180);\r\n        }\r\n        RX_Information();\r\n        if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n        {\r\n            Avoidance_Function_flag = false;\r\n        }\r\n    }\r\n}\r\n\r\nvoid Following_Function()           // Follow the pattern\r\n{\r\n    Following_Function_flag = true;\r\n    while (Following_Function_flag)\r\n    {\r\n        if (UT_distance < 15)\r\n        {\r\n            Motor(Backward, 200);\r\n        }\r\n        else if (15 <= UT_distance && UT_distance <= 20)\r\n        {\r\n            Motor(Stop, 0);\r\n        }\r\n        else if (20 <= UT_distance && UT_distance <= 25)\r\n        {\r\n            Motor(Forward, 180);\r\n        }\r\n        else if (25 <= UT_distance && UT_distance <= 50)\r\n        {\r\n            Motor(Forward, 220);\r\n        }\r\n        else\r\n        {\r\n            Motor(Stop, 0);\r\n        }\r\n        RX_Information();\r\n        if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x10)\r\n        {\r\n            Following_Function_flag = false;\r\n        }\r\n    }\r\n}\r\n\r\nvoid Jail_Function()                // Dungeon mode\r\n{\r\n    int i;\r\n    Jail_Function_flag = true;\r\n    while (Jail_Function_flag)\r\n    {\r\n        Left_Tra_Value = analogRead(LEFT_LINE_TRACJING);\r\n        Center_Tra_Value = analogRead(CENTER_LINE_TRACJING);\r\n        Right_Tra_Value = analogRead(right_LINE_TRACJING);\r\n        if (Left_Tra_Value < Black_Line && Center_Tra_Value < Black_Line && Right_Tra_Value < Black_Line)\r\n        {\r\n            Motor(Forward, 150);\r\n        }\r\n        else if (Left_Tra_Value >= Black_Line && Center_Tra_Value < Black_Line && Right_Tra_Value < Black_Line)\r\n        {\r\n            Motor(Backward,150);\r\n            /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n            for(i = 0; i < 4; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n            Motor(Clockwise,160);\r\n            /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n            for(i = 0; i < 10; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        else if (Left_Tra_Value >= Black_Line && Center_Tra_Value >= Black_Line && Right_Tra_Value < Black_Line)\r\n        {\r\n            Motor(Backward,150);\r\n             /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n            for(i = 0; i < 4; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n            Motor(Clockwise,160);\r\n            for(i = 0; i < 12; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        else if (Left_Tra_Value < Black_Line && Center_Tra_Value < Black_Line && Right_Tra_Value >= Black_Line)\r\n        {\r\n            Motor(Backward,150);\r\n            for(i = 0; i < 4; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n            Motor(Contrarotate,160);\r\n            for(i = 0; i < 10; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        else if (Left_Tra_Value < Black_Line && Center_Tra_Value >= Black_Line && Right_Tra_Value >= Black_Line)\r\n        {\r\n            Motor(Backward,150);\r\n             /* 为了避免堵塞串口接收，延时不能太长，于是分步延时 */\r\n            for(i = 0; i < 4; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n            Motor(Contrarotate,160);\r\n            for(i = 0; i < 12; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            Motor(Backward,150);\r\n            for(i = 0; i < 12; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n            Motor(Clockwise,160);\r\n            for(i = 0; i < 10; i++)\r\n            {\r\n                delay(50);\r\n                RX_Information();\r\n                if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n                {\r\n                    Jail_Function_flag = false;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        RX_Information();\r\n        if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08)\r\n        {\r\n            Jail_Function_flag = false;\r\n        }\r\n    }\r\n}\r\n\r\nvoid auto_doit()                      // Automatic mode\r\n{\r\n    if (0 != auto_count)\r\n    {\r\n        menory_action_flag = true;\r\n    }\r\n    actions_count = 0;\r\n    claw_degrees = clawservo.read();\r\n    arm_degrees = armservo.read();\r\n    base_degrees = baseservo.read();\r\n    while (menory_action_flag)\r\n    {\r\n        for (int i = (1); i <= (auto_count); i = i + (1))\r\n        {\r\n            RX_Information();\r\n            if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n            {\r\n                menory_action_flag = false;\r\n                return;\r\n            }\r\n            if (claw_degrees < claw_read_degress[(int)(i - 1)])\r\n            {\r\n                while (claw_degrees < claw_read_degress[(int)(i - 1)])\r\n                {\r\n                    claw_degrees = claw_degrees + 1;\r\n                    clawservo.write(claw_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                while (claw_degrees > claw_read_degress[(int)(i - 1)])\r\n                {\r\n                    claw_degrees = claw_degrees - 1;\r\n                    clawservo.write(claw_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            RX_Information();\r\n            if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n            {\r\n                menory_action_flag = false;\r\n                return;\r\n            }\r\n            if (arm_degrees < arm_read_degress[(int)(i - 1)])\r\n            {\r\n                while (arm_degrees < arm_read_degress[(int)(i - 1)])\r\n                {\r\n                    arm_degrees = arm_degrees + 1;\r\n                    armservo.write(arm_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                while (arm_degrees > arm_read_degress[(int)(i - 1)])\r\n                {\r\n                    arm_degrees = arm_degrees - 1;\r\n                    armservo.write(arm_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            RX_Information();\r\n            if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n            {\r\n                menory_action_flag = false;\r\n                return;\r\n            }\r\n            if (base_degrees < base_read_degress[(int)(i - 1)])\r\n            {\r\n                while (base_degrees < base_read_degress[(int)(i - 1)])\r\n                {\r\n                    base_degrees = base_degrees + 1;\r\n                    baseservo.write(base_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                while (base_degrees > base_read_degress[(int)(i - 1)])\r\n                {\r\n                    base_degrees = base_degrees - 1;\r\n                    baseservo.write(base_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            RX_Information();\r\n            if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n            {\r\n                menory_action_flag = false;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvoid free_mode()                    // free mode\r\n{\r\n    if(RX_buffer.x_axis >= -30 && RX_buffer.x_axis <= 30 && RX_buffer.y_axis >= 30)     //Forward\r\n    {\r\n        Motor(Forward, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.x_axis >= -30 && RX_buffer.x_axis <= 30 && RX_buffer.y_axis <= -30)     //Backward\r\n    {\r\n        Motor(Backward, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.y_axis >= -30 && RX_buffer.y_axis <= 30 && RX_buffer.x_axis <= -30)     //Turn_Left\r\n    {\r\n        Motor(Turn_Left, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.y_axis >= -30 && RX_buffer.y_axis <= 30 && RX_buffer.x_axis >= 30)     //Turn_Right\r\n    {\r\n        Motor(Turn_Right, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.x_axis <= -30 && RX_buffer.y_axis >= 30)     //Top_Left\r\n    {\r\n        Motor(Top_Left, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.x_axis <= -30 && RX_buffer.y_axis <= -30)     //Bottom_Left\r\n    {\r\n        Motor(Bottom_Left, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.x_axis >= 30 && RX_buffer.y_axis >= 30)     //Top_Right\r\n    {\r\n        Motor(Top_Right, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.x_axis >= 30 && RX_buffer.y_axis <= -30)     //Bottom_Right\r\n    {\r\n        Motor(Bottom_Right, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.mode2 & 0x04)     //Contrarotate\r\n    {\r\n        Motor(Contrarotate, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.mode2 & 0x08)     //Clockwise\r\n    {\r\n        Motor(Clockwise, RX_buffer.C_speed);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.y_Arm <= 30 && RX_buffer.y_Arm >= -30 && RX_buffer.x_Base <= -30)    // base_left\r\n    {\r\n        base_degrees = base_degrees + 1;\r\n        if (base_degrees >= 185) \r\n        {\r\n            base_degrees = 185;\r\n        }\r\n        baseservo.write(base_degrees);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.y_Arm <= 30 && RX_buffer.y_Arm >= -30 && RX_buffer.x_Base >= 30)     // base_right\r\n    {\r\n        base_degrees = base_degrees - 1;\r\n        if (base_degrees <= 0) \r\n        {\r\n            base_degrees = 0;\r\n        }\r\n        baseservo.write(base_degrees);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.x_Base <= 30 && RX_buffer.x_Base >= -30 && RX_buffer.y_Arm <= -30)    // Arm contraction\r\n    {\r\n        arm_degrees = arm_degrees - 1;\r\n        if (arm_degrees <= 0) \r\n        {\r\n            arm_degrees = 0;\r\n        }\r\n        armservo.write(arm_degrees);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.x_Base <= 30 && RX_buffer.x_Base >= -30 && RX_buffer.y_Arm >= 30)     // Arm elongation\r\n    {\r\n        arm_degrees = arm_degrees + 1;\r\n        if (arm_degrees >= 150) \r\n        {\r\n            arm_degrees = 150;\r\n        }\r\n        armservo.write(arm_degrees);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.mode2 & 0x01)            // claws open                                        \r\n    {\r\n        claw_degrees = claw_degrees - 1;\r\n        if (claw_degrees <= 50) \r\n        {\r\n            claw_degrees = 50;\r\n        }\r\n        clawservo.write(claw_degrees);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.mode2 & 0x02)            // claws closed\r\n    {\r\n        claw_degrees = claw_degrees + 1;\r\n        if (claw_degrees >= 150) \r\n        {\r\n            claw_degrees = 150;\r\n        }\r\n        clawservo.write(claw_degrees);\r\n        delay(5);\r\n    }\r\n    else if (RX_buffer.mode1 & 0x20)            // save\r\n    {\r\n        read_degress();\r\n    }  \r\n    else\r\n    {\r\n        Motor(Stop, 0);\r\n    }\r\n}\r\n\r\nvoid read_degress()\r\n{\r\n    if (actions_count <= 19)\r\n    {\r\n        claw_read_degress[(int)((actions_count + 1) - 1)] = clawservo.read();\r\n        delay(50);\r\n        RX_Information(); \r\n        arm_read_degress[(int)((actions_count + 1) - 1)] = armservo.read();\r\n        delay(50);\r\n        RX_Information(); \r\n        base_read_degress[(int)((actions_count + 1) - 1)] = baseservo.read();\r\n        delay(50);\r\n        RX_Information(); \r\n        actions_count = actions_count + 1;\r\n        auto_count = actions_count;\r\n    }\r\n}\r\n\r\nvoid auto_do()\r\n{\r\n    if (0 != auto_count)\r\n    {\r\n        menory_action_flag = true;\r\n    }\r\n    actions_count = 0;\r\n    claw_degrees = clawservo.read();\r\n    arm_degrees = armservo.read();\r\n    base_degrees = baseservo.read();\r\n    while (menory_action_flag)\r\n    {\r\n        for (int i = (1); i <= (auto_count); i = i + (1))\r\n        {\r\n            RX_Information();\r\n            if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n            {\r\n                menory_action_flag = false;\r\n                return;\r\n            }\r\n            if (claw_degrees < claw_read_degress[(int)(i - 1)])\r\n            {\r\n                while (claw_degrees < claw_read_degress[(int)(i - 1)])\r\n                {\r\n                    claw_degrees = claw_degrees + 1;\r\n                    clawservo.write(claw_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                while (claw_degrees > claw_read_degress[(int)(i - 1)])\r\n                {\r\n                    claw_degrees = claw_degrees - 1;\r\n                    clawservo.write(claw_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            RX_Information();\r\n            if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n            {\r\n                menory_action_flag = false;\r\n                return;\r\n            }\r\n            if (arm_degrees < arm_read_degress[(int)(i - 1)])\r\n            {\r\n                while (arm_degrees < arm_read_degress[(int)(i - 1)])\r\n                {\r\n                    arm_degrees = arm_degrees + 1;\r\n                    armservo.write(arm_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                while (arm_degrees > arm_read_degress[(int)(i - 1)])\r\n                {\r\n                    arm_degrees = arm_degrees - 1;\r\n                    armservo.write(arm_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            RX_Information();\r\n            if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n            {\r\n                menory_action_flag = false;\r\n                return;\r\n            }\r\n            if (base_degrees < base_read_degress[(int)(i - 1)])\r\n            {\r\n                while (base_degrees < base_read_degress[(int)(i - 1)])\r\n                {\r\n                    base_degrees = base_degrees + 1;\r\n                    baseservo.write(base_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                while (base_degrees > base_read_degress[(int)(i - 1)])\r\n                {\r\n                    base_degrees = base_degrees - 1;\r\n                    baseservo.write(base_degrees);\r\n                    delay(15);\r\n                    RX_Information();\r\n                    if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n                    {\r\n                        menory_action_flag = false;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            RX_Information();\r\n            if(RX_buffer.mode1 == 0x01 || RX_buffer.mode1 == 0x02 || RX_buffer.mode1 == 0x04 || RX_buffer.mode1 == 0x08 || RX_buffer.mode1 == 0x10)\r\n            {\r\n                menory_action_flag = false;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvoid Motor(int Dir, int Speed)      // Motor drive\r\n{\r\n    digitalWrite(EN_PIN, LOW);\r\n    analogWrite(PWM1_PIN, Speed);\r\n    analogWrite(PWM2_PIN, Speed);\r\n\r\n    digitalWrite(STCP_PIN, LOW);\r\n    shiftOut(DATA_PIN, SHCP_PIN, MSBFIRST, Dir);\r\n    digitalWrite(STCP_PIN, HIGH);\r\n}\r\n\r\nfloat SR04(int Trig, int Echo)      // Ultrasonic distance measurement\r\n{\r\n    digitalWrite(Trig, LOW);\r\n    delayMicroseconds(2);\r\n    digitalWrite(Trig, HIGH);\r\n    delayMicroseconds(10);\r\n    digitalWrite(Trig, LOW);\r\n    float distance = pulseIn(Echo, HIGH) / 58.00;\r\n    delay(10);\r\n    return distance;\r\n}\r\n\r\nvoid TX_Information(byte dis, byte act)     // Sending data packets\r\n{\r\n    int check;\r\n    if(dis>127) dis = 127;\r\n    if(act>127) act = 127;\r\n    TX_package[1] = dis;\r\n    TX_package[2] = act;\r\n    TX_package[3] = byte(dis + act);                        // The sum of inspection                              \r\n    Serial.write(TX_package, 5);                            // Sending data packets\r\n}\r\n\r\nvoid RX_Information(void)                   // Receiving data packet\r\n{\r\n    if(Serial.available() > 0)\r\n    {\r\n        delay(1);                                           // delay 1MS\r\n        if(Serial.readBytes(RX_package, 10))\r\n        {\r\n            if (RX_package[0] == 0xA5 && RX_package[9] == 0x5A)     // The header and tail of the packet are verified\r\n            {\r\n                Serialcount = 0;\r\n                RX_buffer.mode1 = RX_package[1];\r\n                RX_buffer.mode2 = RX_package[2];\r\n                RX_buffer.x_axis = RX_package[3];\r\n                RX_buffer.y_axis = RX_package[4];\r\n                RX_buffer.C_speed = RX_package[5] + 127;\r\n                RX_buffer.x_Base = RX_package[6];\r\n                RX_buffer.y_Arm = RX_package[7];\r\n            }\r\n            else\r\n            {\r\n                Serialcount++;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        delay(1);\r\n        Serialcount++;\r\n        if(Serialcount > 500)\r\n        {\r\n            Serialcount = 0;\r\n            RX_buffer.mode1 = 0; \r\n            RX_buffer.mode2 = 0;\r\n            RX_buffer.x_axis = 0;\r\n            RX_buffer.y_axis = 0;\r\n            RX_buffer.x_Base = 0;\r\n            RX_buffer.y_Arm = 0;\r\n            Line_tracking_Function_flag = false;\r\n            Avoidance_Function_flag = false;\r\n            Following_Function_flag = false;\r\n            Jail_Function_flag = false;\r\n        }\r\n    }\r\n}"}}}Content-Length: 375

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"range":{"start":{"line":19,"character":29},"end":{"line":19,"character":29}},"context":{"diagnostics":[]}}}Content-Length: 272

{"jsonrpc":"2.0","id":2,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"}}}
>>>
Content-Length: 113

{"jsonrpc":"2.0","id":"1","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}Content-Length: 36

{"jsonrpc":"2.0","id":1,"result":[]}Content-Length: 13411

{"jsonrpc":"2.0","id":2,"result":[{"name":"Trig","detail":"const int","kind":13,"range":{"start":{"line":12,"character":0},"end":{"line":12,"character":30}},"selectionRange":{"start":{"line":12,"character":10},"end":{"line":12,"character":14}}},{"name":"Echo","detail":"const int","kind":13,"range":{"start":{"line":13,"character":0},"end":{"line":13,"character":30}},"selectionRange":{"start":{"line":13,"character":10},"end":{"line":13,"character":14}}},{"name":"Forward","detail":"const int","kind":13,"range":{"start":{"line":23,"character":0},"end":{"line":23,"character":28}},"selectionRange":{"start":{"line":23,"character":10},"end":{"line":23,"character":17}}},{"name":"Backward","detail":"const int","kind":13,"range":{"start":{"line":24,"character":0},"end":{"line":24,"character":29}},"selectionRange":{"start":{"line":24,"character":10},"end":{"line":24,"character":18}}},{"name":"Turn_Left","detail":"const int","kind":13,"range":{"start":{"line":25,"character":0},"end":{"line":25,"character":29}},"selectionRange":{"start":{"line":25,"character":10},"end":{"line":25,"character":19}}},{"name":"Turn_Right","detail":"const int","kind":13,"range":{"start":{"line":26,"character":0},"end":{"line":26,"character":29}},"selectionRange":{"start":{"line":26,"character":10},"end":{"line":26,"character":20}}},{"name":"Top_Left","detail":"const int","kind":13,"range":{"start":{"line":27,"character":0},"end":{"line":27,"character":28}},"selectionRange":{"start":{"line":27,"character":10},"end":{"line":27,"character":18}}},{"name":"Bottom_Left","detail":"const int","kind":13,"range":{"start":{"line":28,"character":0},"end":{"line":28,"character":29}},"selectionRange":{"start":{"line":28,"character":10},"end":{"line":28,"character":21}}},{"name":"Top_Right","detail":"const int","kind":13,"range":{"start":{"line":29,"character":0},"end":{"line":29,"character":28}},"selectionRange":{"start":{"line":29,"character":10},"end":{"line":29,"character":19}}},{"name":"Bottom_Right","detail":"const int","kind":13,"range":{"start":{"line":30,"character":0},"end":{"line":30,"character":28}},"selectionRange":{"start":{"line":30,"character":10},"end":{"line":30,"character":22}}},{"name":"Stop","detail":"const int","kind":13,"range":{"start":{"line":31,"character":0},"end":{"line":31,"character":27}},"selectionRange":{"start":{"line":31,"character":10},"end":{"line":31,"character":14}}},{"name":"Contrarotate","detail":"const int","kind":13,"range":{"start":{"line":32,"character":0},"end":{"line":32,"character":29}},"selectionRange":{"start":{"line":32,"character":10},"end":{"line":32,"character":22}}},{"name":"Clockwise","detail":"const int","kind":13,"range":{"start":{"line":33,"character":0},"end":{"line":33,"character":28}},"selectionRange":{"start":{"line":33,"character":10},"end":{"line":33,"character":19}}},{"name":"TX_package","detail":"byte[5]","kind":13,"range":{"start":{"line":36,"character":0},"end":{"line":36,"character":42}},"selectionRange":{"start":{"line":36,"character":5},"end":{"line":36,"character":15}}},{"name":"RX_package","detail":"byte[10]","kind":13,"range":{"start":{"line":37,"character":0},"end":{"line":37,"character":25}},"selectionRange":{"start":{"line":37,"character":5},"end":{"line":37,"character":15}}},{"name":"UT_distance","detail":"int","kind":13,"range":{"start":{"line":38,"character":0},"end":{"line":38,"character":19}},"selectionRange":{"start":{"line":38,"character":4},"end":{"line":38,"character":15}}},{"name":"Serialcount","detail":"int","kind":13,"range":{"start":{"line":39,"character":0},"end":{"line":39,"character":19}},"selectionRange":{"start":{"line":39,"character":4},"end":{"line":39,"character":15}}},{"name":"base_degrees","detail":"int","kind":13,"range":{"start":{"line":40,"character":0},"end":{"line":40,"character":21}},"selectionRange":{"start":{"line":40,"character":4},"end":{"line":40,"character":16}}},{"name":"arm_degrees","detail":"int","kind":13,"range":{"start":{"line":41,"character":0},"end":{"line":41,"character":20}},"selectionRange":{"start":{"line":41,"character":4},"end":{"line":41,"character":15}}},{"name":"claw_degrees","detail":"int","kind":13,"range":{"start":{"line":42,"character":0},"end":{"line":42,"character":21}},"selectionRange":{"start":{"line":42,"character":4},"end":{"line":42,"character":16}}},{"name":"menory_action_flag","detail":"boolean","kind":13,"range":{"start":{"line":43,"character":0},"end":{"line":43,"character":26}},"selectionRange":{"start":{"line":43,"character":8},"end":{"line":43,"character":26}}},{"name":"Line_tracking_Function_flag","detail":"boolean","kind":13,"range":{"start":{"line":44,"character":0},"end":{"line":44,"character":43}},"selectionRange":{"start":{"line":44,"character":8},"end":{"line":44,"character":35}}},{"name":"Avoidance_Function_flag","detail":"boolean","kind":13,"range":{"start":{"line":45,"character":0},"end":{"line":45,"character":39}},"selectionRange":{"start":{"line":45,"character":8},"end":{"line":45,"character":31}}},{"name":"Following_Function_flag","detail":"boolean","kind":13,"range":{"start":{"line":46,"character":0},"end":{"line":46,"character":39}},"selectionRange":{"start":{"line":46,"character":8},"end":{"line":46,"character":31}}},{"name":"Jail_Function_flag","detail":"boolean","kind":13,"range":{"start":{"line":47,"character":0},"end":{"line":47,"character":34}},"selectionRange":{"start":{"line":47,"character":8},"end":{"line":47,"character":26}}},{"name":"Left_Tra_Value","detail":"int","kind":13,"range":{"start":{"line":48,"character":0},"end":{"line":48,"character":18}},"selectionRange":{"start":{"line":48,"character":4},"end":{"line":48,"character":18}}},{"name":"Center_Tra_Value","detail":"int","kind":13,"range":{"start":{"line":49,"character":0},"end":{"line":49,"character":20}},"selectionRange":{"start":{"line":49,"character":4},"end":{"line":49,"character":20}}},{"name":"Right_Tra_Value","detail":"int","kind":13,"range":{"start":{"line":50,"character":0},"end":{"line":50,"character":19}},"selectionRange":{"start":{"line":50,"character":4},"end":{"line":50,"character":19}}},{"name":"Black_Line","detail":"int","kind":13,"range":{"start":{"line":51,"character":0},"end":{"line":51,"character":20}},"selectionRange":{"start":{"line":51,"character":4},"end":{"line":51,"character":14}}},{"name":"actions_count","detail":"int","kind":13,"range":{"start":{"line":52,"character":0},"end":{"line":52,"character":21}},"selectionRange":{"start":{"line":52,"character":4},"end":{"line":52,"character":17}}},{"name":"auto_count","detail":"int","kind":13,"range":{"start":{"line":53,"character":0},"end":{"line":53,"character":14}},"selectionRange":{"start":{"line":53,"character":4},"end":{"line":53,"character":14}}},{"name":"claw_read_degress","detail":"int[20]","kind":13,"range":{"start":{"line":54,"character":0},"end":{"line":54,"character":37}},"selectionRange":{"start":{"line":54,"character":4},"end":{"line":54,"character":21}}},{"name":"arm_read_degress","detail":"int[20]","kind":13,"range":{"start":{"line":55,"character":0},"end":{"line":55,"character":36}},"selectionRange":{"start":{"line":55,"character":4},"end":{"line":55,"character":20}}},{"name":"base_read_degress","detail":"int[20]","kind":13,"range":{"start":{"line":56,"character":0},"end":{"line":56,"character":37}},"selectionRange":{"start":{"line":56,"character":4},"end":{"line":56,"character":21}}},{"name":"(anonymous struct)","detail":"struct","kind":23,"range":{"start":{"line":58,"character":8},"end":{"line":68,"character":1}},"selectionRange":{"start":{"line":58,"character":8},"end":{"line":58,"character":14}},"children":[{"name":"mode1","detail":"byte","kind":8,"range":{"start":{"line":60,"character":4},"end":{"line":60,"character":14}},"selectionRange":{"start":{"line":60,"character":9},"end":{"line":60,"character":14}}},{"name":"mode2","detail":"byte","kind":8,"range":{"start":{"line":62,"character":4},"end":{"line":62,"character":14}},"selectionRange":{"start":{"line":62,"character":9},"end":{"line":62,"character":14}}},{"name":"x_axis","detail":"char","kind":8,"range":{"start":{"line":63,"character":4},"end":{"line":63,"character":19}},"selectionRange":{"start":{"line":63,"character":9},"end":{"line":63,"character":15}}},{"name":"y_axis","detail":"char","kind":8,"range":{"start":{"line":64,"character":4},"end":{"line":64,"character":19}},"selectionRange":{"start":{"line":64,"character":9},"end":{"line":64,"character":15}}},{"name":"C_speed","detail":"byte","kind":8,"range":{"start":{"line":65,"character":4},"end":{"line":65,"character":22}},"selectionRange":{"start":{"line":65,"character":9},"end":{"line":65,"character":16}}},{"name":"x_Base","detail":"char","kind":8,"range":{"start":{"line":66,"character":4},"end":{"line":66,"character":19}},"selectionRange":{"start":{"line":66,"character":9},"end":{"line":66,"character":15}}},{"name":"y_Arm","detail":"char","kind":8,"range":{"start":{"line":67,"character":4},"end":{"line":67,"character":18}},"selectionRange":{"start":{"line":67,"character":9},"end":{"line":67,"character":14}}}]},{"name":"rx_buffer","detail":"type alias","kind":5,"range":{"start":{"line":58,"character":0},"end":{"line":68,"character":10}},"selectionRange":{"start":{"line":68,"character":1},"end":{"line":68,"character":10}}},{"name":"RX_buffer","detail":"rx_buffer","kind":13,"range":{"start":{"line":70,"character":0},"end":{"line":70,"character":19}},"selectionRange":{"start":{"line":70,"character":10},"end":{"line":70,"character":19}}},{"name":"clawservo","detail":"Servo","kind":13,"range":{"start":{"line":72,"character":0},"end":{"line":72,"character":15}},"selectionRange":{"start":{"line":72,"character":6},"end":{"line":72,"character":15}}},{"name":"armservo","detail":"Servo","kind":13,"range":{"start":{"line":73,"character":0},"end":{"line":73,"character":14}},"selectionRange":{"start":{"line":73,"character":6},"end":{"line":73,"character":14}}},{"name":"baseservo","detail":"Servo","kind":13,"range":{"start":{"line":74,"character":0},"end":{"line":74,"character":15}},"selectionRange":{"start":{"line":74,"character":6},"end":{"line":74,"character":15}}},{"name":"Timer2Isr","detail":"void ()","kind":12,"range":{"start":{"line":76,"character":0},"end":{"line":80,"character":1}},"selectionRange":{"start":{"line":76,"character":5},"end":{"line":76,"character":14}}},{"name":"setup","detail":"void ()","kind":12,"range":{"start":{"line":81,"character":0},"end":{"line":114,"character":1}},"selectionRange":{"start":{"line":81,"character":5},"end":{"line":81,"character":10}}},{"name":"loop","detail":"void ()","kind":12,"range":{"start":{"line":116,"character":0},"end":{"line":151,"character":1}},"selectionRange":{"start":{"line":116,"character":5},"end":{"line":116,"character":9}}},{"name":"Line_tracking_Function","detail":"void ()","kind":12,"range":{"start":{"line":153,"character":0},"end":{"line":191,"character":1}},"selectionRange":{"start":{"line":153,"character":5},"end":{"line":153,"character":27}}},{"name":"Avoidance_Function","detail":"void ()","kind":12,"range":{"start":{"line":193,"character":0},"end":{"line":290,"character":1}},"selectionRange":{"start":{"line":193,"character":5},"end":{"line":193,"character":23}}},{"name":"Following_Function","detail":"void ()","kind":12,"range":{"start":{"line":292,"character":0},"end":{"line":323,"character":1}},"selectionRange":{"start":{"line":292,"character":5},"end":{"line":292,"character":23}}},{"name":"Jail_Function","detail":"void ()","kind":12,"range":{"start":{"line":325,"character":0},"end":{"line":473,"character":1}},"selectionRange":{"start":{"line":325,"character":5},"end":{"line":325,"character":18}}},{"name":"auto_doit","detail":"void ()","kind":12,"range":{"start":{"line":475,"character":0},"end":{"line":605,"character":1}},"selectionRange":{"start":{"line":475,"character":5},"end":{"line":475,"character":14}}},{"name":"free_mode","detail":"void ()","kind":12,"range":{"start":{"line":607,"character":0},"end":{"line":727,"character":1}},"selectionRange":{"start":{"line":607,"character":5},"end":{"line":607,"character":14}}},{"name":"read_degress","detail":"void ()","kind":12,"range":{"start":{"line":729,"character":0},"end":{"line":745,"character":1}},"selectionRange":{"start":{"line":729,"character":5},"end":{"line":729,"character":17}}},{"name":"auto_do","detail":"void ()","kind":12,"range":{"start":{"line":747,"character":0},"end":{"line":877,"character":1}},"selectionRange":{"start":{"line":747,"character":5},"end":{"line":747,"character":12}}},{"name":"Motor","detail":"void (int, int)","kind":12,"range":{"start":{"line":879,"character":0},"end":{"line":888,"character":1}},"selectionRange":{"start":{"line":879,"character":5},"end":{"line":879,"character":10}}},{"name":"SR04","detail":"float (int, int)","kind":12,"range":{"start":{"line":890,"character":0},"end":{"line":900,"character":1}},"selectionRange":{"start":{"line":890,"character":6},"end":{"line":890,"character":10}}},{"name":"TX_Information","detail":"void (byte, byte)","kind":12,"range":{"start":{"line":902,"character":0},"end":{"line":911,"character":1}},"selectionRange":{"start":{"line":902,"character":5},"end":{"line":902,"character":19}}},{"name":"RX_Information","detail":"void ()","kind":12,"range":{"start":{"line":913,"character":0},"end":{"line":957,"character":1}},"selectionRange":{"start":{"line":913,"character":5},"end":{"line":913,"character":19}}}]}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"1","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 142

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"2/27","percentage":7}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/27","percentage":11}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"3/27","percentage":11}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/27","percentage":14}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"4/27","percentage":14}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/27","percentage":18}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"5/27","percentage":18}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/27","percentage":22}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"6/27","percentage":22}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/27","percentage":25}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"7/27","percentage":25}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/27","percentage":29}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"8/27","percentage":29}}}Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"9/27","percentage":33}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/27","percentage":37}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"10/27","percentage":37}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/27","percentage":40}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"11/27","percentage":40}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/27","percentage":44}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"12/27","percentage":44}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"13/27","percentage":48}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"14/27","percentage":51}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/27","percentage":55}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"15/27","percentage":55}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"16/27","percentage":59}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"17/27","percentage":62}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"18/27","percentage":66}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"19/27","percentage":70}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"20/27","percentage":74}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"20/27","percentage":74}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/27","percentage":77}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"21/27","percentage":77}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"22/27","percentage":81}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"23/27","percentage":85}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"24/27","percentage":88}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"25/27","percentage":92}}}Content-Length: 144

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"26/27","percentage":96}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 301

{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"position":{"line":30,"character":75}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":3,"result":null}
<<<
Content-Length: 301

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"position":{"line":30,"character":75}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":4,"result":null}
<<<
Content-Length: 301

{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"position":{"line":29,"character":76}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":5,"result":null}
<<<
Content-Length: 301

{"jsonrpc":"2.0","id":6,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"position":{"line":27,"character":47}}}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":6,"result":null}
<<<
Content-Length: 313

{"jsonrpc":"2.0","id":7,"method":"textDocument/documentHighlight","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"position":{"line":29,"character":81}}}
>>>
Content-Length: 36

{"jsonrpc":"2.0","id":7,"result":[]}
<<<
Content-Length: 375

{"jsonrpc":"2.0","id":8,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///e%3A/5-%E6%95%99%E7%A8%8B/1.tutorial/ZYC0072%E6%9C%BA%E6%A2%B0%E6%89%8B%E5%B0%8F%E8%BD%A6/ZYC0072/4.%20Tutorial_Arduino/4_Arduino%20Code/6_BlueTooth/6_BlueTooth.ino"},"range":{"start":{"line":29,"character":81},"end":{"line":29,"character":81}},"context":{"diagnostics":[]}}}
>>>
Content-Length: 36

{"jsonrpc":"2.0","id":8,"result":[]}
<<<
Content-Length: 179

{"jsonrpc":"2.0","method":"ino/didCompleteBuild","params":{"buildOutputUri":"file:///c%3A/Users/Administrator/AppData/Local/Temp/arduino-sketch-A3382DABA7F6E369095E4EA5ED379A56"}}
>>>
Content-Length: 118

{"jsonrpc":"2.0","id":"2","method":"window/workDoneProgress/create","params":{"token":"arduinoLanguageServerRebuild"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"2","result":null}
>>>
Content-Length: 140

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"begin","title":"Building sketch"}}}Content-Length: 129

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"arduinoLanguageServerRebuild","value":{"kind":"end","message":"done"}}}Content-Length: 113

{"jsonrpc":"2.0","id":"3","method":"window/workDoneProgress/create","params":{"token":"backgroundIndexProgress"}}
<<<
Content-Length: 40

{"jsonrpc":"2.0","id":"3","result":null}
>>>
Content-Length: 143

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"begin","title":"indexing","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 141

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"report","message":"0/1","percentage":0}}}Content-Length: 107

{"jsonrpc":"2.0","method":"$/progress","params":{"token":"backgroundIndexProgress","value":{"kind":"end"}}}
<<<
Content-Length: 58

{"jsonrpc":"2.0","id":9,"method":"shutdown","params":null}
>>>
Content-Length: 38

{"jsonrpc":"2.0","id":9,"result":null}
<<<
Content-Length: 47

{"jsonrpc":"2.0","method":"exit","params":null}